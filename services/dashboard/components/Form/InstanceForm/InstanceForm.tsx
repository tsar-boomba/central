import RichTextEditor from '@/components/RichTextEditor';
import { useAccount, useUser } from '@/components/UserProvider';
import { InstanceStatus } from '@/types/Instance';
import { Role } from '@/types/User';
import { NewInstance } from '@/types/utils';
import { callApi } from '@/utils/apiHelpers';
import { requireRole } from '@/utils/authUtils';
import { fetchNotification } from '@/utils/fetchNotification';
import {
	Box,
	Button,
	Checkbox,
	Divider,
	Group,
	Input,
	Paper,
	Text,
	TextInput,
} from '@mantine/core';
import { useForm } from '@mantine/form';
import { FormRulesRecord } from '@mantine/form/lib/types';
import { useDisclosure } from '@mantine/hooks';
import { openConfirmModal } from '@mantine/modals';
import { useRouter } from 'next/router';
import { useState } from 'react';
import { accountValidation } from '../AccountForm';
import StateInput from '../StateInput';
import TextInputInfo from '../TextInputInfo';

interface Props {
	create?: boolean;
	// represent type difference between create and update
	defaultInstance?: NewInstance;
}

type FormValues = NewInstance;

export const instanceValidation: FormRulesRecord<FormValues> = {
	name: (v) =>
		/^[a-zA-Z0-9_-]+$/.test(v) ? null : 'Name is not url safe. Do not use spaces, @, !, or #.',
	...accountValidation,
};

const createDefaultInstance: NewInstance = {
	address1: '',
	address2: null,
	businessName: '',
	city: '',
	name: '',
	phoneNumber: '',
	email: '',
	shortName: '',
	state: '',
	status: InstanceStatus.Deploying,
	bottomText: null,
	topText: null,
	zipCode: '',
	accountId: '', // doesnt matter
};

// Values already entered when someone picks same as account
let oldValues: NewInstance;

const InstanceForm = ({ create, defaultInstance = createDefaultInstance }: Props) => {
	const { user } = useUser();
	const { account } = useAccount();
	const router = useRouter();
	const [submitting, setSubmitting] = useState(false);
	const form = useForm<FormValues>({
		initialValues: defaultInstance,
		validate: instanceValidation,
	});
	const [sameAsAccount, { toggle }] = useDisclosure(false, {
		onClose: () => {
			form.setValues({ ...form.values, ...(oldValues || {}) });
		},
		onOpen: () => {
			oldValues = { ...form.values };
			form.setValues({
				...form.values,
				...account,
			});
		},
	});
	const isAdmin = requireRole(user?.role, Role.Admin);

	const onSubmit = (data: FormValues) =>
		openConfirmModal({
			title: 'Create Instance?',
			children: (
				<Text>
					Are you sure you want to create an instance. This will increase your usage for
					the month and cause your next bill to be higher.
				</Text>
			),
			labels: { confirm: "I'm Sure", cancel: 'Go Back' },
			confirmProps: { color: 'green' },
			onConfirm: () => {
				if (!account) return console.log('No account, cannot submit form.');
				setSubmitting(true);
				const [ok, err] = fetchNotification('create-instance', {
					message: 'Creating instance...',
					autoClose: 15000, // give it a good amount of time
				});
				callApi<NewInstance>({
					route: 'instances',
					body: {
						...data,
						accountId: account.id,
						address2: data.address2 === '' ? null : data.address2,
						topText: data.topText === '' ? null : data.topText,
						bottomText: data.bottomText === '' ? null : data.bottomText,
					},
				})
					.then(async (res) => {
						if (res.ok) {
							router.push('/instances');
							return ok({
								message:
									'Successfully began instance deployment! 😁 It usually takes about 10 minutes to complete.',
							});
						}
						return err({
							message: 'Failed to start instance deployment. 😔 Please try again.',
						});
					})
					.finally(() => setSubmitting(false));
			},
		});

	return (
		<Box
			component='form'
			sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}
			onSubmit={form.onSubmit(onSubmit)}
		>
			<Paper>
				<TextInputInfo
					required
					disabled={!create}
					label='Name'
					info='Name of the instance. Cannot be changed.'
					{...form.getInputProps('name')}
				/>
				<Divider my='md' />
				<Text align='center'>
					This information is used for rate confirmations and invoices generated by PUDO
				</Text>
				<Group position='center'>
					<Checkbox
						size='md'
						disabled={!account}
						defaultChecked={false}
						onChange={() => toggle()}
						label='Same as account'
					/>
				</Group>
				<TextInputInfo
					required
					label='Business Name'
					info='Name of the business, appears on documents.'
					disabled={sameAsAccount}
					{...form.getInputProps('businessName')}
				/>
				<TextInputInfo
					required
					label='Short Business Name'
					info='Short name of the business, used where full name is unnecessary.'
					disabled={sameAsAccount}
					{...form.getInputProps('shortName')}
				/>
				<TextInput
					required
					placeholder='123 Abc ln'
					label='Address Line 1'
					disabled={sameAsAccount}
					{...form.getInputProps('address1')}
				/>
				<TextInput
					placeholder='ste 512'
					label='Address Line 2'
					disabled={sameAsAccount}
					{...form.getInputProps('address2')}
					onChange={(e) => {
						// if empty string, it will be set to null
						form.setFieldValue('address2', e.target.value || null);
					}}
				/>
				<TextInputInfo
					required
					disabled={sameAsAccount}
					placeholder='example@example.com'
					label='Email'
					info='Email that handles rate confirmation and invoices.'
					{...form.getInputProps('email')}
				/>
				<TextInputInfo
					required
					disabled={sameAsAccount}
					label='Phone Number'
					info='Phone number that handles rate confirmation and invoices.'
					{...form.getInputProps('phoneNumber')}
				/>
				<Group align='center' grow>
					<TextInputInfo
						required
						disabled={sameAsAccount}
						label='City'
						{...form.getInputProps('city')}
					/>
					<StateInput
						required
						disabled={sameAsAccount}
						label='State'
						searchable
						{...form.getInputProps('state')}
					/>
				</Group>
				<TextInputInfo
					required
					disabled={sameAsAccount}
					label='Zip Code'
					{...form.getInputProps('zipCode')}
				/>
				<Input.Wrapper
					label='Top Text'
					description='Text that goes at the top of invoices. Not required.'
				>
					<RichTextEditor
						value={form.values.topText ?? ''}
						onChange={(v) => form.setFieldValue('topText', v !== '' ? v : null)}
						controls={[
							['bold', 'italic', 'underline', 'strike', 'clean'],
							['h1', 'h2', 'h3', 'h4'],
							['unorderedList', 'orderedList'],
							['link', 'blockquote'],
							['alignLeft', 'alignCenter', 'alignRight'],
						]}
					/>
				</Input.Wrapper>
				<Input.Wrapper
					label='Bottom Text'
					description='Text that goes at the bottom of invoices. Not required.'
				>
					<RichTextEditor
						value={form.values.bottomText ?? ''}
						onChange={(v) => form.setFieldValue('bottomText', v !== '' ? v : null)}
						controls={[
							['bold', 'italic', 'underline', 'strike', 'clean'],
							['h1', 'h2', 'h3', 'h4'],
							['unorderedList', 'orderedList'],
							['link', 'blockquote'],
							['alignLeft', 'alignCenter', 'alignRight'],
						]}
					/>
				</Input.Wrapper>
			</Paper>
			{isAdmin && (
				<Button disabled={submitting} loading={submitting} type='submit' mt='md'>
					Create Instance
				</Button>
			)}
		</Box>
	);
};

export default InstanceForm;
