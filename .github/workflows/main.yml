name: Main CI/CD

on:
  push:
    branches:
      - main

concurrency:
  group: ci-cd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  crud-changes:
    uses: ./.github/workflows/changes.yml
    with:
      path: services/crud/**

  crud-ci:
    uses: ./.github/workflows/crud-ci.yml

  push-crud:
    runs-on: ubuntu-latest
    needs: [crud-ci, crud-changes]
    if: needs.crud-changes.outputs.changed == 'true'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx
        with:
          buildkitd-flags: --debug
      - name: Login to ECR
        id: ecr
        uses: ./.github/ecr-login
        with:
          access-key: ${{ secrets.ECR_ACCESS_KEY }}
          secret-key: ${{ secrets.ECR_SECRET_KEY }}
      - name: Build and push
        uses: ./.github/build-push
        with:
          registry: ${{ steps.ecr.outputs.registry }}
          service: crud
          file-dir: ./services/crud
          context: ./

  gateway-changes:
    uses: ./.github/workflows/changes.yml
    with:
      path: services/gateway/**

  gateway-ci:
    uses: ./.github/workflows/gateway-ci.yml

  push-gateway:
    runs-on: ubuntu-latest
    needs: [gateway-ci, gateway-changes]
    if: needs.gateway-changes.outputs.changed == 'true'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx
        with:
          buildkitd-flags: --debug
      - name: Login to ECR
        id: ecr
        uses: ./.github/ecr-login
        with:
          access-key: ${{ secrets.ECR_ACCESS_KEY }}
          secret-key: ${{ secrets.ECR_SECRET_KEY }}
      - name: Build and push
        uses: ./.github/build-push
        with:
          registry: ${{ steps.ecr.outputs.registry }}
          service: gateway
          file-dir: ./services/gateway
          context: ./

  payments-changes:
    uses: ./.github/workflows/changes.yml
    with:
      path: services/payments/**

  payments-ci:
    uses: ./.github/workflows/payments-ci.yml

  push-payments:
    runs-on: ubuntu-latest
    needs: [payments-ci, payments-changes]
    if: needs.payments-changes.outputs.changed == 'true'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx
        with:
          buildkitd-flags: --debug
      - name: Login to ECR
        id: ecr
        uses: ./.github/ecr-login
        with:
          access-key: ${{ secrets.ECR_ACCESS_KEY }}
          secret-key: ${{ secrets.ECR_SECRET_KEY }}
      - name: Build and push
        uses: ./.github/build-push
        with:
          registry: ${{ steps.ecr.outputs.registry }}
          service: payments
          file-dir: ./services/payments
          context: ./

  dashboard-changes:
    uses: ./.github/workflows/changes.yml
    with:
      path: services/dashboard/**

  dashboard-ci:
    uses: ./.github/workflows/dashboard-ci.yml

  push-dashboard:
    runs-on: ubuntu-latest
    needs: [dashboard-ci, dashboard-changes]
    if: needs.dashboard-changes.outputs.changed == 'true'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx
        with:
          buildkitd-flags: --debug
      - name: Login to ECR
        id: ecr
        uses: ./.github/ecr-login
        with:
          access-key: ${{ secrets.ECR_ACCESS_KEY }}
          secret-key: ${{ secrets.ECR_SECRET_KEY }}
      - name: Build and push
        uses: ./.github/build-push
        with:
          registry: ${{ steps.ecr.outputs.registry }}
          service: dashboard
          file-dir: ./services/dashboard
          context: ./services/dashboard

  nginx-changes:
    uses: ./.github/workflows/changes.yml
    with:
      path: nginx/**

  push-nginx:
    runs-on: ubuntu-latest
    needs: [nginx-changes]
    if: needs.nginx-changes.outputs.changed == 'true'
    steps:
      - uses: actions/checkout@v3
      - name: Login to ECR
        id: ecr
        uses: ./.github/ecr-login
        with:
          access-key: ${{ secrets.ECR_ACCESS_KEY }}
          secret-key: ${{ secrets.ECR_SECRET_KEY }}
      - name: Build and push
        uses: ./.github/build-push
        with:
          registry: ${{ steps.ecr.outputs.registry }}
          service: nginx
          file-dir: ./nginx
          context: ./nginx

  instance-deploy-changes:
    uses: ./.github/workflows/changes.yml
    with:
      path: services/serverless/instance-deploy/**

  instance-deploy-deploy:
    runs-on: ubuntu-latest
    needs: [instance-deploy-changes]
    if: needs.instance-deploy-changes.outputs.changed == 'true'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      - uses: actions-rs/toolchain@v1.0.6
        with:
          profile: minimal
          toolchain: stable
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: 'central-instance-deploy-cache'
      - name: Install cargo-lambda
        run: pip install cargo-lambda
      - name: Build Lambda Binaries
        run: cargo lambda build --release --arm64 --output-format zip -p instance-deploy
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.DEPLOY_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.DEPLOY_SECRET_ACCESS_KEY }}
      - name: Publish New Versions
        run: |
          aws lambda update-function-code --function-name "central-instance-deploy" --zip-file fileb://target/lambda/deploy/bootstrap.zip --publish --region us-east-1
          aws lambda update-function-code --function-name "central-instance-config" --zip-file fileb://target/lambda/config/bootstrap.zip --publish --region us-east-1
          aws lambda update-function-code --function-name "central-instance-fail" --zip-file fileb://target/lambda/fail/bootstrap.zip --publish --region us-east-1
          
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    needs: [push-gateway, push-crud, push-payments, push-dashboard, push-nginx]
    # No fails and cancels and one of the services must have been pushed in order to start a deploy
    if: ${{ !failure() && !cancelled() && (needs.push-gateway.result == 'success' || needs.push-crud.result == 'success' || needs.push-payments.result == 'success' || needs.push-dashboard.result == 'success' || needs.push-nginx.result == 'success') }}
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.DEPLOY_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.DEPLOY_SECRET_ACCESS_KEY }}
      - name: Install Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install EB CLI using pip
        run: |
          python -m pip install --upgrade pip
          pip install awsebcli
      - run: eb init "milkyweb-dashboard" --platform docker --region "us-east-1"
      - run: eb status
      - run: eb use "Main-env"
      - run: eb config --display
      - name: Deploy to Elastic Beanstalk
        run: |
          eb deploy -l ${{ github.sha }} -m "${{ github.event.head_commit.message }}" -v -p -nh
